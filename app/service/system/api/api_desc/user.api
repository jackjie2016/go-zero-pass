syntax = "v1"

info(
    title: "user management"
    desc: "user management api"
    author: "Ryan Su"
    email: "yuansu.china.work@gmail.com"
    version: "v1.0"
)

import "base.api"

type (
    // login request | 登录参数
    // swagger:model LoginReq
    LoginReq {
        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username   string `json:"username" validate:"alphanum,max=20"`

        // Password | 密码
        // Required: true
        // Min length: 6
        // Max length: 30
        Password   string `json:"password" validate:"max=30,min=6"`

        // Captcha Id which store in redis | 验证码编号, 存在redis中
        // Required: true
        // Max length: 20
        CaptchaId  string `json:"captchaId"  validate:"len=20"`

        // The Captcha which users input | 用户输入的验证码
        // Required: true
        // Max length: 5
        Captcha    string `json:"captcha" validate:"len=5"`
    }

    // The login response data | 登录返回数据
    // swagger:response LoginResp
    LoginResp {
        // User's UUID | 用户的UUID
        UserId       string          `json:"userId"`

        // User's role information| 用户的角色信息
        // in: body
        Role         RoleInfoSimple  `json:"role"`

        // Token for authorization | 验证身份的token
        Token        string          `json:"token"`

        // Expire timestamp | 过期时间戳
        Expire       uint64          `json:"expire"`
    }

    // The profile response data | 个人信息返回数据
    // swagger:response ProfileResp
    ProfileResp {
        // user's nickname | 用户的昵称
        Nickname     string       `json:"nickname"`

        // The user's avatar path | 用户的头像路径
        Avatar       string       `json:"avatar"`

        // User's mobile phone number | 用户的手机号码
        Mobile       string       `json:"mobile"`

        // The user's email address | 用户的邮箱
        Email        string       `json:"email"`
    }

    // The profile request data | 个人信息请求参数
    // swagger:model ProfileReq
    ProfileReq {
        // user's nickname | 用户的昵称
        // Required: true
        // Max length: 10
        Nickname     string       `json:"nickname" validate:"alphanumunicode,max=10"`

        // The user's avatar path | 用户的头像路径
        // Required: true
        // Max length: 30
        Avatar       string       `json:"avatar"`

        // User's mobile phone number | 用户的手机号码
        // Required: true
        // Max length: 18
        Mobile       string       `json:"mobile" validate:"numeric,max=18"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email        string       `json:"email" validate:"email,max=100"`
    }

    // The simple role data | 简单的角色数据
    // swagger:response RoleInfoSimple
    RoleInfoSimple {
        // Role name | 角色名
        RoleName   string `json:"roleName"`

        // Role value | 角色值
        Value      string `json:"value"`
    }

    // register request | 注册参数
    // swagger:model RegisterReq
    RegisterReq {
        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username  string `json:"username" validate:"alphanum,max=20"`

        // Password | 密码
        // Required: true
        // Min length: 6
        // Max length: 30
        Password  string `json:"password" validate:"max=30,min=6"`

        // Captcha Id which store in redis | 验证码编号, 存在redis中
        // Required: true
        // Max length: 20
        CaptchaId string `json:"captchaId" validate:"len=20"`

        // The Captcha which users input | 用户输入的验证码
        // Required: true
        // Max length: 5
        Captcha   string `json:"captcha" validate:"len=5"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email     string `json:"email" validate:"email,max=100"`
    }

    // change user's password request | 修改密码请求参数
    // swagger:model ChangePasswordReq
    ChangePasswordReq {
        // User's old password | 用户旧密码
        // Required: true
        // Max length: 30
        OldPassword string `json:"oldPassword" validate:"max=30"`

        // User's new password | 用户新密码
        // Required: true
        // Max length: 30
        NewPassword string `json:"newPassword" validate:"max=30"`
    }


    // The response data of user's information | 用户信息返回数据
    // swagger:response UserInfoResp
    UserInfoResp {
        // User's id | 用户Id
        Id           int64        `json:"id"`

        // User Name | 用户名
        Username     string       `json:"username"`

        // User's nickname | 用户的昵称
        Nickname     string       `json:"nickname"`

        // User's mobile phone number | 用户的手机号码
        Mobile       string       `json:"mobile"`

        // User's role id | 用户的角色Id
        RoleId       uint32       `json:"roleId"`

        // The user's email address | 用户的邮箱
        Email        string       `json:"email"`

        // The user's avatar path | 用户的头像路径
        Avatar       string       `json:"avatar"`

        // The user's layout mode | 用户的布局
        SideMode     string       `json:"sideMode"`

        // The user's status | 用户状态
        // 1 normal, 2 ban | 1 正常 2 拉黑
        Status       int32        `json:"status"`

        CreateAt     int64        `json:"createAt"`

        UpdateAt     int64        `json:"updateAt"`
    }

    // The response data of user's basic information | 用户基本信息返回数据
    // swagger:response GetUserInfoResp
    GetUserInfoResp {
        // User's UUID | 用户的UUID
        UUID         string       `json:"UUID"`

        // User name | 用户名
        Username     string       `json:"username"`

        // user's nickname | 用户的昵称
        Nickname     string       `json:"nickname"`

        // The user's avatar path | 用户的头像路径
        Avatar       string       `json:"avatar"`

        // User's role information| 用户的角色信息
        // in: body
        Roles        GetUserRoleInfo `json:"roles"`
    }

    // The response data of user's basic role information | 用户角色信息数据
    // swagger:response GetUserRoleInfo
    GetUserRoleInfo {
        // Role name | 角色名
        RoleName   string `json:"roleName"`

        // Role value for permission control | 角色值用于前端页面组件显示权限
        Value      string `json:"value"`
    }

    // The response data of user list | 用户列表数据
    // swagger:response UserListResp
    UserListResp {
        // The total number of data | 数据总数
        Total uint64 `json:"total"`

        // The user list data | 用户列表数据
        // in: body
        Data    []UserInfoResp  `json:"data"`
    }

    // The permission code for front end permission control | 权限码： 用于前端权限控制
    // swagger:response PermCodeResp
    PermCodeResp {
        // Permission code data | 权限码数据
        Data []string `json:"data"`
    }

    // Create or update user information request | 创建或更新用户信息
    // swagger:model CreateOrUpdateUserReq
    CreateOrUpdateUserReq {
        // User's id | 用户Id
        // Required: true
        Id           int64        `json:"id" validate:"number"`

        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username     string       `json:"username" validate:"alphanum,max=20"`

        // User's nickname | 用户的昵称
        // Required: true
        // Max length: 10
        Nickname     string       `json:"nickname" validate:"alphanumunicode,max=10"`

        // Password | 密码
        // Required: true
        // Max length: 30
        // Min length: 6
        Password     string       `json:"password" validate:"omitempty,max=30,min=6"`

        // User's mobile phone number | 用户的手机号码
        // Required: true
        // Max length: 18
        Mobile       string       `json:"mobile" validate:"numeric,max=18"`

        // User's role id | 用户的角色Id
        // Required: true
        // Maximum: 1000
        RoleId       uint32       `json:"roleId" validate:"number,max=1000"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email        string       `json:"email" validate:"email,max=100"`

        // The user's avatar path | 用户的头像路径
        // Required: true
        // Example: https://localhost/static/1.png
        Avatar       string       `json:"avatar"`

        // The user's status | 用户状态
        // 1 normal, 2 ban | 1 正常 2 拉黑
        // Required: true
        // Maximum: 20
        Status       int32        `json:"status" validate:"number,max=20"`
    }

    // Get user list request | 获取用户列表请求参数
    // swagger:model GetUserListReq
    GetUserListReq {
        // Page number | 第几页
        // Required: true
        Page uint64 `json:"page" validate:"number"`

        // Page size | 单页数据行数
        // Required: true
        // Maximum: 100000
        PageSize uint64 `json:"pageSize" validate:"number,max=100000"`

        // User Name | 用户名
        // Required: true
        // Max length: 20
        Username string `json:"username" validate:"omitempty,alphanum,max=20"`

        // User's nickname | 用户的昵称
        // Required: true
        // Max length: 10
        Nickname string `json:"nickname" validate:"omitempty,alphanumunicode,max=10"`

        // User's mobile phone number | 用户的手机号码
        // Required: true
        // Max length: 18
        Mobile string `json:"mobile" validate:"omitempty,numeric,max=18"`

        // The user's email address | 用户的邮箱
        // Required: true
        // Max length: 100
        Email string  `json:"email" validate:"omitempty,email,max=100"`

        // User's role ID | 用户的角色Id
        // Required: true
        // Maximum: 1000
        RoleId uint64 `json:"roleId" validate:"omitempty,number,max=1000"`
    }
)

@server(
    group: user
)

service core {
    // swagger:route POST /user/login user login
    // Log in | 登录
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: LoginReq
    // Responses:
    //   200: LoginResp
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler login
    post /user/login (LoginReq) returns (LoginResp)

    // swagger:route POST /user/register user register
    // Register | 注册
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: RegisterReq
    // Responses:
    //   200: SimpleMsg
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler register
    post /user/register (RegisterReq) returns (SimpleMsg)
}

@server(
    group : user
    jwt : Auth
    middleware: Authority
)

service core {
    // swagger:route POST /user/change-password user changePassword
    // Change Password | 修改密码
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: ChangePasswordReq
    // Responses:
    //   200: SimpleMsg
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler changePassword
    post /user/change-password (ChangePasswordReq) returns (SimpleMsg)

    // swagger:route GET /user/info user getUserInfo
    // Get user basic infomation | 获取用户基本信息
    // Responses:
    //   200: GetUserInfoResp
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler getUserInfo
    get /user/info returns (GetUserInfoResp)

    // swagger:route POST /user user createOrUpdateUser
    // Create or update user's information | 新增或更新用户
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: CreateOrUpdateUserReq
    // Responses:
    //   200: SimpleMsg
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler createOrUpdateUser
    post /user (CreateOrUpdateUserReq) returns (SimpleMsg)

    // swagger:route POST /user/list user getUserList
    // Get user list | 获取用户列表
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: GetUserListReq
    // Responses:
    //   200: UserListResp
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler getUserList
    post /user/list (GetUserListReq) returns (UserListResp)

    // swagger:route DELETE /user user deleteUser
    // Delete user information | 删除用户信息
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: IDReq
    // Responses:
    //   200: SimpleMsg
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler deleteUser
    delete /user (IDReq) returns (SimpleMsg)

    // swagger:route GET /user/perm user getUserPermCode
    // Get user's permission code | 获取用户权限码
    // Responses:
    //   200: PermCodeResp
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler getUserPermCode
    get /user/perm returns (PermCodeResp)

    // swagger:route GET /user/profile user getUserProfile
    // Get user's profile | 获取用户个人信息
    // Responses:
    //   200: ProfileResp
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler getUserProfile
    get /user/profile returns (ProfileResp)

    // swagger:route POST /user/profile user updateUserProfile
    // Update user's profile | 更新用户个人信息
    // Parameters:
    //  + name: body
    //    require: true
    //    in: body
    //    type: ProfileReq
    // Responses:
    //   200: SimpleMsg
    //   401: SimpleMsg
    //   500: SimpleMsg
    @handler updateUserProfile
    post /user/profile (ProfileReq) returns (SimpleMsg)
}
