// Code generated by goctl. DO NOT EDIT.
// Source: route.proto

package route

import (
	"context"

	"go-zero-pass/app/service/k8s/route/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllRoute  = pb.AllRoute
	FindAll   = pb.FindAll
	Response  = pb.Response
	RouteId   = pb.RouteId
	RouteInfo = pb.RouteInfo
	RoutePath = pb.RoutePath

	Route interface {
		// 对外提供添加服务
		AddRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Response, error)
		DeleteRoute(ctx context.Context, in *RouteId, opts ...grpc.CallOption) (*Response, error)
		UpdateRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Response, error)
		FindRouteByID(ctx context.Context, in *RouteId, opts ...grpc.CallOption) (*RouteInfo, error)
		FindAllRoute(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllRoute, error)
	}

	defaultRoute struct {
		cli zrpc.Client
	}
)

func NewRoute(cli zrpc.Client) Route {
	return &defaultRoute{
		cli: cli,
	}
}

// 对外提供添加服务
func (m *defaultRoute) AddRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewRouteClient(m.cli.Conn())
	return client.AddRoute(ctx, in, opts...)
}

func (m *defaultRoute) DeleteRoute(ctx context.Context, in *RouteId, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewRouteClient(m.cli.Conn())
	return client.DeleteRoute(ctx, in, opts...)
}

func (m *defaultRoute) UpdateRoute(ctx context.Context, in *RouteInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewRouteClient(m.cli.Conn())
	return client.UpdateRoute(ctx, in, opts...)
}

func (m *defaultRoute) FindRouteByID(ctx context.Context, in *RouteId, opts ...grpc.CallOption) (*RouteInfo, error) {
	client := pb.NewRouteClient(m.cli.Conn())
	return client.FindRouteByID(ctx, in, opts...)
}

func (m *defaultRoute) FindAllRoute(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllRoute, error) {
	client := pb.NewRouteClient(m.cli.Conn())
	return client.FindAllRoute(ctx, in, opts...)
}
