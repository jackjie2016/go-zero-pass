// Code generated by goctl. DO NOT EDIT.
// Source: pod.proto

package server

import (
	"context"

	"go-zero-pass/app/service/k8s/pod/rpc/internal/logic"
	"go-zero-pass/app/service/k8s/pod/rpc/internal/svc"
	"go-zero-pass/app/service/k8s/pod/rpc/pb"
)

type PodServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedPodServer
}

func NewPodServer(svcCtx *svc.ServiceContext) *PodServer {
	return &PodServer{
		svcCtx: svcCtx,
	}
}

func (s *PodServer) Ping(ctx context.Context, in *pb.Request) (*pb.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *PodServer) AddPod(ctx context.Context, in *pb.PodInfo) (*pb.Response, error) {
	l := logic.NewAddPodLogic(ctx, s.svcCtx)
	return l.AddPod(in)
}

func (s *PodServer) DeletePod(ctx context.Context, in *pb.PodId) (*pb.Response, error) {
	l := logic.NewDeletePodLogic(ctx, s.svcCtx)
	return l.DeletePod(in)
}

func (s *PodServer) FindPodByID(ctx context.Context, in *pb.PodId) (*pb.PodInfo, error) {
	l := logic.NewFindPodByIDLogic(ctx, s.svcCtx)
	return l.FindPodByID(in)
}

func (s *PodServer) UpdatePod(ctx context.Context, in *pb.PodInfo) (*pb.Response, error) {
	l := logic.NewUpdatePodLogic(ctx, s.svcCtx)
	return l.UpdatePod(in)
}

func (s *PodServer) FindAllPod(ctx context.Context, in *pb.FindAll) (*pb.AllPod, error) {
	l := logic.NewFindAllPodLogic(ctx, s.svcCtx)
	return l.FindAllPod(in)
}
