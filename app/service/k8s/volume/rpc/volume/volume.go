// Code generated by goctl. DO NOT EDIT.
// Source: volume.proto

package volume

import (
	"context"

	"go-zero-pass/app/service/k8s/volume/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllVolume  = pb.AllVolume
	FindAll    = pb.FindAll
	Response   = pb.Response
	VolumeId   = pb.VolumeId
	VolumeInfo = pb.VolumeInfo

	Volume interface {
		// 对外提供添加服务
		AddVolume(ctx context.Context, in *VolumeInfo, opts ...grpc.CallOption) (*Response, error)
		DeleteVolume(ctx context.Context, in *VolumeId, opts ...grpc.CallOption) (*Response, error)
		UpdateVolume(ctx context.Context, in *VolumeInfo, opts ...grpc.CallOption) (*Response, error)
		FindVolumeByID(ctx context.Context, in *VolumeId, opts ...grpc.CallOption) (*VolumeInfo, error)
		FindAllVolume(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllVolume, error)
	}

	defaultVolume struct {
		cli zrpc.Client
	}
)

func NewVolume(cli zrpc.Client) Volume {
	return &defaultVolume{
		cli: cli,
	}
}

// 对外提供添加服务
func (m *defaultVolume) AddVolume(ctx context.Context, in *VolumeInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewVolumeClient(m.cli.Conn())
	return client.AddVolume(ctx, in, opts...)
}

func (m *defaultVolume) DeleteVolume(ctx context.Context, in *VolumeId, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewVolumeClient(m.cli.Conn())
	return client.DeleteVolume(ctx, in, opts...)
}

func (m *defaultVolume) UpdateVolume(ctx context.Context, in *VolumeInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewVolumeClient(m.cli.Conn())
	return client.UpdateVolume(ctx, in, opts...)
}

func (m *defaultVolume) FindVolumeByID(ctx context.Context, in *VolumeId, opts ...grpc.CallOption) (*VolumeInfo, error) {
	client := pb.NewVolumeClient(m.cli.Conn())
	return client.FindVolumeByID(ctx, in, opts...)
}

func (m *defaultVolume) FindAllVolume(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllVolume, error) {
	client := pb.NewVolumeClient(m.cli.Conn())
	return client.FindAllVolume(ctx, in, opts...)
}
