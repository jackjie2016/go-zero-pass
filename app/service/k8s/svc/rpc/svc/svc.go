// Code generated by goctl. DO NOT EDIT.
// Source: svc.proto

package svc

import (
	"context"

	"go-zero-pass/app/service/k8s/svc/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AllSvc   = pb.AllSvc
	FindAll  = pb.FindAll
	Response = pb.Response
	SvcId    = pb.SvcId
	SvcInfo  = pb.SvcInfo
	SvcPort  = pb.SvcPort

	Svc interface {
		// 对外提供添加服务
		AddSvc(ctx context.Context, in *SvcInfo, opts ...grpc.CallOption) (*Response, error)
		DeleteSvc(ctx context.Context, in *SvcId, opts ...grpc.CallOption) (*Response, error)
		UpdateSvc(ctx context.Context, in *SvcInfo, opts ...grpc.CallOption) (*Response, error)
		FindSvcByID(ctx context.Context, in *SvcId, opts ...grpc.CallOption) (*SvcInfo, error)
		FindAllSvc(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllSvc, error)
	}

	defaultSvc struct {
		cli zrpc.Client
	}
)

func NewSvc(cli zrpc.Client) Svc {
	return &defaultSvc{
		cli: cli,
	}
}

// 对外提供添加服务
func (m *defaultSvc) AddSvc(ctx context.Context, in *SvcInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewSvcClient(m.cli.Conn())
	return client.AddSvc(ctx, in, opts...)
}

func (m *defaultSvc) DeleteSvc(ctx context.Context, in *SvcId, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewSvcClient(m.cli.Conn())
	return client.DeleteSvc(ctx, in, opts...)
}

func (m *defaultSvc) UpdateSvc(ctx context.Context, in *SvcInfo, opts ...grpc.CallOption) (*Response, error) {
	client := pb.NewSvcClient(m.cli.Conn())
	return client.UpdateSvc(ctx, in, opts...)
}

func (m *defaultSvc) FindSvcByID(ctx context.Context, in *SvcId, opts ...grpc.CallOption) (*SvcInfo, error) {
	client := pb.NewSvcClient(m.cli.Conn())
	return client.FindSvcByID(ctx, in, opts...)
}

func (m *defaultSvc) FindAllSvc(ctx context.Context, in *FindAll, opts ...grpc.CallOption) (*AllSvc, error) {
	client := pb.NewSvcClient(m.cli.Conn())
	return client.FindAllSvc(ctx, in, opts...)
}
