// Code generated by goctl. DO NOT EDIT.
// Source: svc.proto

package server

import (
	"context"

	"go-zero-pass/app/service/k8s/svc/rpc/internal/logic"
	"go-zero-pass/app/service/k8s/svc/rpc/internal/svc"
	"go-zero-pass/app/service/k8s/svc/rpc/pb"
)

type SvcServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedSvcServer
}

func NewSvcServer(svcCtx *svc.ServiceContext) *SvcServer {
	return &SvcServer{
		svcCtx: svcCtx,
	}
}

// 对外提供添加服务
func (s *SvcServer) AddSvc(ctx context.Context, in *pb.SvcInfo) (*pb.Response, error) {
	l := logic.NewAddSvcLogic(ctx, s.svcCtx)
	return l.AddSvc(in)
}

func (s *SvcServer) DeleteSvc(ctx context.Context, in *pb.SvcId) (*pb.Response, error) {
	l := logic.NewDeleteSvcLogic(ctx, s.svcCtx)
	return l.DeleteSvc(in)
}

func (s *SvcServer) UpdateSvc(ctx context.Context, in *pb.SvcInfo) (*pb.Response, error) {
	l := logic.NewUpdateSvcLogic(ctx, s.svcCtx)
	return l.UpdateSvc(in)
}

func (s *SvcServer) FindSvcByID(ctx context.Context, in *pb.SvcId) (*pb.SvcInfo, error) {
	l := logic.NewFindSvcByIDLogic(ctx, s.svcCtx)
	return l.FindSvcByID(in)
}

func (s *SvcServer) FindAllSvc(ctx context.Context, in *pb.FindAll) (*pb.AllSvc, error) {
	l := logic.NewFindAllSvcLogic(ctx, s.svcCtx)
	return l.FindAllSvc(in)
}
